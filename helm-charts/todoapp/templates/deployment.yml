apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}
  namespace: {{ .Values.todoapp.namespace }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.todoapp.image.repository }}:{{ .Values.todoapp.image.tag }}
{{/*        command: ["sh", "-c"]*/}}
{{/*        args:*/}}
{{/*          - |*/}}
{{/*            echo "Container started at $(date)" > /proc/1/fd/1  # Вывод в stdout*/}}
{{/*            ls -la /app  # Проверка содержимого рабочей директории*/}}
{{/*            env | grep -i "DB_"  # Проверка переменных (например, связанных с БД)*/}}
{{/*            # Ждём MySQL (с таймаутом и ретраями)*/}}
{{/*            echo "Waiting for MySQL..."*/}}
{{/*            while ! /usr/local/bin/wait-for-it.sh mysql-0.mysql.mysql.svc.cluster.local:3306 --timeout=5; do*/}}
{{/*              echo "Retrying MySQL connection..."*/}}
{{/*              sleep 2*/}}
{{/*            done*/}}

{{/*            # Запускаем миграции и сервер*/}}
{{/*            echo "Running migrations..."*/}}
{{/*            python manage.py migrate*/}}

{{/*            echo "Starting Django server..."*/}}
{{/*            exec python manage.py runserver 0.0.0.0:8080*/}}
{{/*            echo "Waiting for MySQL..."*/}}
{{/*            /usr/local/bin/wait-for-it.sh mysql-0.mysql.mysql.svc.cluster.local:3306 --timeout=30 -- echo "MySQL is up!"*/}}
{{/*            exec python manage.py migrate && python manage.py runserver 0.0.0.0:8080*/}}
        resources:
          requests:
            memory: {{ .Values.todoapp.resources.requests.memory }}
            cpu: {{ .Values.todoapp.resources.requests.cpu }}
          limits:
            memory: {{ .Values.todoapp.resources.limits.memory }}
            cpu: {{ .Values.todoapp.resources.limits.cpu }}
        env:
        - name: PYTHONUNBUFFERED
          valueFrom:
            configMapKeyRef:
              name: {{ .Chart.Name }}-config
              key: PYTHONUNBUFFERED
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: SECRET_KEY
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: DB_PASSWORD
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: DB_HOST
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: api/health
            port: 8080
          initialDelaySeconds: 222
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: api/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5