name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name}} -${{ github.sha }}

on:
  push:
    branches: ["main", "test/develop"]
  pull_request:
    branches: ["main", "test/develop"]

env:
  PythonVersion: 3.8
  DockerImageName: ${{ secrets.DOCKERHUB_USERNAME }}/todoapp

jobs:
  python-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PythonVersion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

      - name: Generate Report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: |
          flake8 . --show-source --statistics --exit-zero

      - name: Check Complexity
        run: |
          flake8 . --exit-zero --max-complexity=6

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts
          path: .

      - name: Upload helm artifacts
        if: github.ref_name == 'main' || github.ref_name == 'test/develop'
        uses: actions/upload-artifact@v4
        with:
          name: helm-artifacts
          path: ${{ github.workspace }}/helm-charts

  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }} #|| github.ref_name == 'test/develop'
    needs: python-ci
    steps:

      - uses: actions/download-artifact@v4
        name: Download python artifacts
        with:
          name: python-artifacts
          path: .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ./src
          tags: ${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    runs-on: ubuntu-latest
    needs: python-ci
#    defaults:
#      run:
#        working-directory: ${{ github.workspace }}/helm-charts

    if: github.ref_name == 'main' || github.ref_name == 'test/develop'
    name: Helm CI Job
    steps:

    - uses: actions/download-artifact@v4
      name: Download helm artifacts
      with:
        name: helm-artifacts
        path: .

    - name: Set Up Helm
      uses: azure/setup-helm@v4.3.0

    - name: Lint helm
      run: helm lint ./todoapp

    - name: Template Helm
      run: |
          helm template todoapp \
          ./todoapp \
          -f ./todoapp/values.yaml

    - name: Package Helm
      run: helm package ./todoapp

    - name: Upload Helm Artifact
      uses: actions/upload-artifact@v4
      with:
        name: helm-package_on_helm-ci
        path: ./*.tgz

  helm-deploy:
    runs-on: ubuntu-latest
    needs: helm-ci
    if: github.ref_name == 'main' || github.ref_name == 'test/develop'
    name: Helm Deploy
    environment: develop
    steps:

    - uses: actions/download-artifact@v4
      with:
        name: helm-package_on_helm-ci
        path: .

    - uses: actions/download-artifact@v4
      name: Download helm artifacts
      with:
        name: helm-artifacts
        path: .

    - name: Set Up Helm
      uses: azure/setup-helm@v4.3.0

    - name: Setup Kubectl
      uses: azure/setup-kubectl@v4

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/aks-set-context@v4
      with:
        cluster-name: ${{ vars.AZURE_CLUSTER_NAME }}
        resource-group: ${{ vars.AZURE_RESOURCE_GROUP }}


    - name: Deploy Helm to AKS
      run: helm upgrade --install --atomic --dry-run --debug  todoapp ./todoapp.tgz \
        -f ./todoapp/values.yaml
        --set mysql.MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        --set mysql.MYSQL_USER=${{ secrets.MYSQL_USER }}
        --set mysql.MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
        --set todoapp.secrets.SECRET_KEY=${{ secrets.SECRET_KEY }}
        --set todoapp.secrets.DB_NAME=${{ secrets.DB_NAME }}
        --set todoapp.secrets.DB_USER=${{ secrets.DB_USER }}
        --set todoapp.secrets.DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        --set todoapp.secrets.DB_HOST=${{ secrets.DB_HOST }}
